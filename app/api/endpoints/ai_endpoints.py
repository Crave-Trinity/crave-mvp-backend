# File: app/api/endpoints/ai_endpoints.py
"""
AI-powered endpoints that generate insights, detect patterns,
and list available craving personas.
"""
from fastapi import APIRouter, HTTPException
from app.core.use_cases.generate_craving_insights import generate_insights
from app.core.services.analytics_service import analyze_patterns, list_personas

router = APIRouter()

@router.post("/api/ai/insights", tags=["AI"])
async def ai_insights(user_id: int, query: str | None = None):
    """
    Generate AI insights based on a user's craving history.

    Args:
        user_id (int): The user's ID.
        query (str, optional): A specific query to focus the insights.

    Returns:
        dict: Insights generated by the AI.
    """
    try:
        insights = generate_insights(user_id, query)
        return {"insights": insights}
    except Exception as exc:
        raise HTTPException(status_code=500, detail=f"AI insights error: {exc}")

@router.get("/api/ai/patterns", tags=["AI"])
async def ai_patterns(user_id: int):
    """
    Retrieve pattern analysis of the user's cravings.

    Args:
        user_id (int): The user's ID.

    Returns:
        dict: Detected patterns in the craving data.
    """
    try:
        patterns = analyze_patterns(user_id)
        return {"patterns": patterns}
    except Exception as exc:
        raise HTTPException(status_code=500, detail=f"Pattern analysis error: {exc}")

@router.get("/api/ai/personas", tags=["AI"])
async def ai_personas():
    """
    List available craving personas (LoRA fine-tuned).

    Returns:
        dict: A list of available AI craving personas.
    """
    try:
        personas = list_personas()
        return {"personas": personas}
    except Exception as exc:
        raise HTTPException(status_code=500, detail=f"Personas retrieval error: {exc}")